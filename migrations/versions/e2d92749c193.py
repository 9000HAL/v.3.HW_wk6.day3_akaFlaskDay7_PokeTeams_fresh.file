"""empty message

Revision ID: e2d92749c193
Revises: eca2147e7842
Create Date: 2023-08-23 08:40:50.860450
"""

# Revision identifiers, used by Alembic.
revision = 'e2d92749c193'
down_revision = 'eca2147e7842'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa

def upgrade():
    # Ensure the unique constraint on the name column in the pokemon table
    with op.batch_alter_table('pokemon', schema=None) as batch_op:
        batch_op.create_unique_constraint('uq_pokemon_name', ['name'])

    # Add the pokemon_name column without NOT NULL constraint first
    with op.batch_alter_table('user_pokemon', schema=None) as batch_op:
        batch_op.add_column(sa.Column('pokemon_name', sa.String()))

    # Populate the pokemon_name column based on some logic
    op.execute("UPDATE user_pokemon SET pokemon_name = 'Default Value'")

    # Now, alter the column to have the NOT NULL constraint
    with op.batch_alter_table('user_pokemon', schema=None) as batch_op:
        batch_op.alter_column('pokemon_name', existing_type=sa.String(), nullable=False)

    # Continue with the rest of the migration (if there's any other changes you want to include)

def downgrade():
    # This is the code to undo the above upgrade if needed
    with op.batch_alter_table('user_pokemon', schema=None) as batch_op:
        batch_op.drop_column('pokemon_name')



    # ### end Alembic commands ###

































































































"""empty message

Revision ID: e2d92749c193
Revises: eca2147e7842
Create Date: 2023-08-23 08:40:50.860450


from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e2d92749c193'
down_revision = 'eca2147e7842'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('pokemon', schema=None) as batch_op: 
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
        #batch_op.drop_column('id')                    ########c4------------

    with op.batch_alter_table('user_pokemon', schema=None) as batch_op:
        batch_op.add_column(sa.Column('pokemon_name', sa.String(), nullable=False))
        batch_op.drop_constraint('user_pokemon_pokemon_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'pokemon', ['pokemon_name'], ['name'])
        batch_op.drop_column('pokemon_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_pokemon', schema=None) as batch_op:
        batch_op.add_column(sa.Column('pokemon_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('user_pokemon_pokemon_id_fkey', 'pokemon', ['pokemon_id'], ['id'])
        batch_op.drop_column('pokemon_name')

    with op.batch_alter_table('pokemon', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pokemon_id_seq'::regclass)"), autoincrement=True, nullable=False))
        batch_op.alter_column('name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    # ### end Alembic commands ###


"""